----Read cards for player 1----

Heap:
0 - P1 card 1
1 - P1 card 2
2 - P1 card 3
3 - P1 card 4
4 - P1 card 5
10 - P2 card 1
11 - P2 card 2
12 - P2 card 3
13 - P2 card 4
14 - P2 card 5
20 - P2 card 1
21 - P2 card 2
22 - P2 card 3
23 - P2 card 4
24 - P2 card 5
.
.
.
.
100 - Number of Players
Output Cards:


Algorithm:
Print: Please enter the cards seperated by a space:
	- Push character onto stack ..Num/
	- Output Character on Stack -/..
Read Cards
	- Loop 0 - 4
	


4 - 0
3 - 1
2 - 2
1 - 3
0 - 4	


Print "Enter number of players:"
Push 100
Read # of players into #100
Push 100
Retrieve #100
Label 2 - PlayerEntryLoop
	Dup
	Push 100
	Retrieve #100
	Push 1
	Sub
	Sub
	Print "Player "
	Dup
	Print #
	Print " please enter your cards:"
	?Push 1
	?Sub
	
	Push 5 //NumOfCards
	Label 0 - InputLoop
		Push 1
		Subtract
		
		//Calculate heap for card storage
		Dup
		Push 4
		Swap
		Subtract
		
		Read number - Card into heap
		
		dup
		JumpTo 1 if 0
		JumptTo 0
	Label 1 - EndOfLoop
	Drop (0)
	dup
	JumpTo 3 if 0
	JumptTo 2
Label 3 - EndOfPlayerEntry



#######################################################################################
CALL SR 1 - Enter # of Players
CALL SR 2 - Get Player Info
CALL SR 9 - Calculate Hands

SR 0 Print "Enter number of players"
ENDSR

SR 1 Get#OfPlaayers
	PUSH 100
	READ # into @100
ENDSR

SR 2 EnterPlayerInfo
	PUSH 0
	LABEL 3 EnterPlayerCards
		CALL SR 4
		CALL SR 5
		PUSH 1
		ADD
		DUP
		PUSH 100
		RETRIEVE @100
		SUB
		JUMPIF0 8
		JUMP 3
	LABEL 8
	DISCARD
ENDSR

SR 4 Print "Player i please enter your cards:"
	PRINT "Player "
	DUP
	PUSH 1
	ADD
	PRINT #
	PRINT " please enter your cards:"
ENDSR

SR 5 EnterCards
	DUP
	PUSH 10
	MULTIPLY (10 * currentplayer)
	LABEL 6
		DUP (heapindex)
		READ#
		PUSH 1
		ADD (heapindex + 1)
		DUP
		PUSH 5
		MOD
		JUMPIF0 7
		JUMP 6
	LABEL 7
	DISCARD
ENDSR

SR 9 Calculate Hands
	PUSH 0
	LABEL 10
		CALL SR 12 (CheckFlush)
		PUSH 1
		ADD
		DUP
		PUSH 100
		RETRIEVE @100
		SUB
		JUMPIF0 11
		JUMP 10
	LABEL 11
	DISCARD
ENDSR

SR 12 Check Flush
	DUP (currentplayer)
	PUSH 10
	MULTIPLY (10 * currentplayer)
	DUP
	RETRIEVE
	CALL SR 13 (GetSuit)
	PUSH 101 (srheap 1)
	SWAP
	STORE (store suit in srheap1)
	LABEL 14
		DROP
		PUSH 1
		ADD (card0index + 1)
		
		//Are all cards checked?
		DUP
		PUSH 5
		MOD
		JUMPIF0 15

		//Check Card suite
		DUP
		RETRIEVE
		CALL SR 13 (GetSuit)
		PUSH 101 (srheap 1)
		RETRIEVE
		SUB
		
		JUMPIF0 14
		DROP
		DROP
		ENDSR
	LABEL 15
		DROP
		DUP (currentplayer)
		PUSH 200
		ADD
		PUSH 4 (flushvalue)
		STORE (flushvalue in currentplayerhandvalue)
ENDSR

SR 13 GetSuit
	DUP (cardindex)
	PUSH 13
	DIV
ENDSR

SR 16 Check3OfAKind
	DUP (currentplayer)
	PUSH 10
	MULTIPLY (10 * currentplayer)
	LABEL 17
		CALL SR 20 (getvalue)
		PUSH 101
		SWAP
		STORE (put current value in heap)
		PUSH 102
		PUSH 1
		STORE
		
		LABEL 18
			DUP (heapindexofcurrentcard)
			PUSH 1
			ADD (nextindex)
			
			//Are all cards checked?
			DUP
			PUSH 5
			MOD
			JUMPIF0 19
			
			DUP
			RETRIEVE
			CALL SR 20 (getvalue)
			PUSH 101
			RETRIEVE
			SUB
			JUMPIF0 20
			JUMP 18
			LABEL 20
				PUSH 102
				RETRIEVE
				PUSH 1
				ADD
				DUP
				PUSH 3
				SUB
				JUMPIF0 21
				PUSH 102
				SWAP
				STORE
				JUMP 18
			LABEL 21
				DROP
				DROP
				DUP (currentplayer)
				PUSH 200
				ADD
				PUSH 3 (3ofakindvalue)
				STORE (flushvalue in currentplayerhandvalue)
				ENDSR
		LABEL 19
			DROP
			PUSH 1
			ADD
			DUP
			PUSH 3
			MOD
			JUMPIF0 17
			DROP
			ENDSR
ENDSR
