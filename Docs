0-12  C
13-25 H
26-38 S
39-51 D


############################################
CALL SR 1 - Enter # of Players
CALL SR 2 - Get Player Info
CALL SR 9 - Calculate Hands

SR 0 Print "Enter number of players"
ENDSR

SR 1 Get#OfPlaayers
	PUSH 100
	READ # into @100
ENDSR

SR 2 EnterPlayerInfo
	PUSH 0
	LABEL 3 EnterPlayerCards
		CALL SR 5 (EnterCards)
		PUSH 1
		ADD
		DUP
		PUSH 100
		RETRIEVE @100
		SUB
		JUMPIF0 8
		JUMP 3
	LABEL 8
	DROP
ENDSR



SR 4 Print "Player i, please enter your cards:"
	PRINT "Player "
	DUP
	PUSH 10
	DIV
	PUSH 1
	ADD
	PRINT #
	PRINT ", please enter your cards:"
ENDSR

SR 19 Print "Enter cards seperated by spaces. Each should have a value (2-10, J, Q, K, A) and a suite (C, H, S, D). Example: (2C AH 10D QS 5C)"
ENDSR

SR 5 EnterCards
	DUP
	DUP
	PUSH 10
	MULTIPLY (10 * currentplayer)
	CALL SR 4 (Print prompt)
	LABEL 6
		DUP (heapindex)
		
		//Read value
		PUSH 101
		READC
		
		//Flush 0 from 10
		PUSH 101
		RETRIEVE
		PUSH 1 (00110001)
		SUB
		JUMPIF0 30
		JUMP 31
		LABEL 30
		PUSH 102
		READC	
		LABEL 31
		
		//Read suit
		PUSH 102
		READC
		
		 
		PUSH 101
		RETRIEVE
		CALL SR 20
		PUSH 102
		RETRIEVE
		CALL SR 26
		PUSH 13
		MULTIPLY
		ADD
		STORE
		
		PUSH101
		READC (flush space)
		
		PUSH 1
		ADD (heapindex + 1)
		DUP
		PUSH 5
		MOD
		JUMPIF0 7
		JUMP 6
	LABEL 7
	DROP
	DROP
ENDSR

SR 20 Character to card value
	DUP
	PUSH 01000001 (A)
	SUB
	JUMPIF0 21
	
	DUP
	PUSH 01001011 (K)
	SUB
	JUMPIF0 22
	
	DUP
	PUSH 01010001 (Q)
	SUB
	JUMPIF0 23
	
	DUP
	PUSH 01001010 (J)
	SUB
	JUMPIF0 24
	
	DUP
	PUSH 00110001 (10)
	SUB
	JUMPIF0 25
	
	PUSH 50
	SUB
	ENDSR
	
	LABEL 21
		DROP
		PUSH 12
		ENDSR
	
	LABEL 22
		DROP
		PUSH 11
		ENDSR
		
	LABEL 23
		DROP
		PUSH 10
		ENDSR
	
	LABEL 24
		DROP
		PUSH 9
		ENDSR
		
	LABEL 25
		DROP
		PUSH 8
		ENDSR

SR 26 Character to suit
	DUP
	PUSH 01000011 (C)
	SUB
	JUMPIF0 27
	
	DUP
	PUSH 01001000 (H)
	SUB
	JUMPIF0 28
	
	DUP
	PUSH 01010011 (S)
	SUB
	JUMPIF0 29
	
	DROP
	PUSH 3 (D)
	ENDSR
	
	LABEL 27
		DROP
		PUSH 0
		ENDSR
	
	LABEL 28
		DROP
		PUSH 1
		ENDSR
		
	LABEL 29
		DROP
		PUSH 2
		ENDSR
ENDSR

SR 9 Calculate Hands
	PUSH 0
	LABEL 10
		DUP
		PUSH 200
		ADD
		PUSH 0
		STORE
		CALL SR 36 (Check2OfAKind)
		CALL SR 16 (Check3OfAKind)
		CALL SR 12 (CheckFlush)	
		PUSH 1
		ADD
		DUP
		PUSH 100
		RETRIEVE @100
		SUB
		JUMPIF0 11
		JUMP 10
	LABEL 11
	DISCARD
ENDSR

SR 12 Check Flush
	DUP (currentplayer)
	PUSH 10
	MULTIPLY (10 * currentplayer)
	DUP
	RETRIEVE
	CALL SR 13 (GetSuit)
	PUSH 101 (srheap 1)
	SWAP
	STORE (store suit in srheap1)
	LABEL 14
		DROP
		PUSH 1
		ADD (card0index + 1)
		
		//Are all cards checked?
		DUP
		PUSH 5
		MOD
		JUMPIF0 15

		//Check Card suite
		DUP
		RETRIEVE
		CALL SR 13 (GetSuit)
		PUSH 101 (srheap 1)
		RETRIEVE
		SUB
		
		JUMPIF0 14
		DROP
		DROP
		ENDSR
	LABEL 15
		DROP
		DUP (currentplayer)
		PUSH 200
		ADD
		PUSH 4 (flushvalue)
		STORE (flushvalue in currentplayerhandvalue)
ENDSR

SR 13 GetSuit
	DUP (cardindex)
	PUSH 13
	DIV
ENDSR

SR 16 Check3OfAKind
	DUP (currentplayer)
	PUSH 10
	MULTIPLY (10 * currentplayer)
	LABEL 17
		DUP
		RETRIEVE
		CALL SR 32 (getvalue)
		PUSH 101
		SWAP
		STORE (put current value in heap)
		PUSH 102
		PUSH 1
		STORE
		DUP
		
		LABEL 18
			PUSH 1
			ADD (nextindex)
			
			//Are all cards checked?
			DUP
			PUSH 5
			MOD
			JUMPIF0 19
			
			DUP
			RETRIEVE
			CALL SR 32 (getvalue)
			PUSH 101
			RETRIEVE
			SUB
			JUMPIF0 33
			JUMP 18
			LABEL 33
				PUSH 102
				RETRIEVE
				PUSH 1
				ADD
				DUP
				PUSH 3
				SUB
				JUMPIF0 34
				PUSH 102
				SWAP
				STORE
				JUMP 18
			LABEL 34
				DROP
				DROP
				DROP
				DUP (currentplayer)
				PUSH 200
				ADD
				PUSH 3 (3ofakindvalue)
				STORE (flushvalue in currentplayerhandvalue)
				ENDSR
		LABEL 19
			DROP
			PUSH 1
			ADD
			DUP
			PUSH 3
			MOD
			JUMPIF0 35
			JUMP 17
			LABEL 35
			DROP
			ENDSR
ENDSR

SR 32 GetValueFromCard
	DUP
	PUSH 13
	MOD
ENDSR

SR 36 Check2OfAKind
	DUP (currentplayer)
	PUSH 10
	MULTIPLY (10 * currentplayer)
	LABEL 41
		DUP
		RETRIEVE
		CALL SR 32 (getvalue)
		PUSH 101
		SWAP
		STORE (put current value in heap)
		PUSH 102
		PUSH 1
		STORE
		DUP
		
		LABEL 37
			PUSH 1
			ADD (nextindex)
			
			//Are all cards checked?
			DUP
			PUSH 5
			MOD
			JUMPIF0 38
			
			DUP
			RETRIEVE
			CALL SR 32 (getvalue)
			PUSH 101
			RETRIEVE
			SUB
			JUMPIF0 39
			JUMP 37
			LABEL 39
				PUSH 102
				RETRIEVE
				PUSH 1
				ADD
				DUP
				PUSH 2
				SUB
				JUMPIF0 40
				PUSH 102
				SWAP
				STORE
				JUMP 37
			LABEL 40
				DROP
				DROP
				DROP
				DUP (currentplayer)
				PUSH 200
				ADD
				PUSH 1 (2ofakindvalue)
				STORE (flushvalue in currentplayerhandvalue)
				ENDSR
		LABEL 38
			DROP
			PUSH 1
			ADD
			DUP
			PUSH 4
			MOD
			JUMPIF0 42
			JUMP 41
			LABEL 42
			DROP
			ENDSR
ENDSR



5
2S 3S AH AC AD
6D 7D JD QD 2D
7C 4D 4H 7S 7H
8H 9S JS KS 8C
KS 9S JS 8H 8C
4S 9C JS KS 3C
